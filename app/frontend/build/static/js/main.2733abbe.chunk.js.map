{"version":3,"sources":["todo_app/ToDoApp.js","routes.js","App.js","store/actions/actionTypes.js","store/utility.js","store/reducers/auth.js","serviceWorker.js","reportWebVitals.js","index.js"],"names":["ToDoApp","props","BaseRouter","exact","path","to","render","App","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","updateObject","oldObject","updatedProperties","initialState","token","error","loading","authStart","state","action","authSuccess","authFail","authLogout","reducer","type","actionTypes","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnhances","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sLA6BgBA,EAxBA,SAACC,GACZ,OACE,gCACG,sCACA,iDCKKC,MATf,WACI,OACI,gCACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SAAsB,cAAC,IAAD,CAAUC,GAAG,aACnC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASE,OAAQ,SAACL,GAAD,OAAW,cAAC,EAAD,eAAcA,WCGzDM,MARf,WACE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,O,uBCPOC,EAAa,aACbC,EAAe,eACfC,EAAY,YACZC,EAAc,cCHdC,EAAe,SAACC,EAAWC,GACpC,OAAO,2BACAD,GACAC,ICGLC,EAAe,CACjBC,MAAO,KACPC,MAAO,KACPC,SAAS,GAOPC,EAAY,SAACC,EAAOC,GACtB,OAAOT,EAAaQ,EAAO,CACvBH,MAAO,KACPC,SAAS,KAIXI,EAAc,SAACF,EAAOC,GACxB,OAAOT,EAAaQ,EAAO,CACvBJ,MAAOK,EAAOL,MACdC,MAAO,KACPC,SAAS,KAIXK,EAAW,SAACH,EAAOC,GACrB,OAAOT,EAAaQ,EAAO,CACvBH,MAAOI,EAAOJ,MACdC,SAAS,KAIXM,EAAa,SAACJ,EAAOC,GACvB,OAAOT,EAAaQ,EAAO,CACvBJ,MAAO,KACPE,SAAS,KAgBFO,EAXC,WAAmC,IAAlCL,EAAiC,uDAAzBL,EAAcM,EAAW,uCAC9C,OAAQA,EAAOK,MACX,KAAKC,EAAwB,OAAOR,EAAUC,GAC9C,KAAKO,EAA0B,OAAOL,EAAYF,EAAOC,GACzD,KAAKM,EAAuB,OAAOJ,EAASH,EAAOC,GACnD,KAAKM,EAAyB,OAAOH,EAAWJ,GAChD,QACI,OAAOA,ICzCCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGRQ,EAAkBb,OAAOc,sCAAwCC,IACjEC,EAAQC,YAAYrB,EAASiB,EACjCK,YAAgBC,OAGlBC,IAAS3C,OACP,cAAC,IAAD,CAAUuC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,SAM1BlB,IF0GM,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.2733abbe.chunk.js","sourcesContent":["import React from 'react';\r\n// import logo from '../logo.svg';\r\n// import '../App.css';\r\n\r\n\r\nconst ToDoApp = (props) => {\r\n     return (\r\n       <div>\r\n          <p>Hello</p>\r\n          <p>How are you?</p>\r\n       </div>\r\n       \r\n      //   <header className=\"App-header\">\r\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      //     <p>\r\n      //     Edit <code>src/App.js</code> and save to reload.\r\n      //     </p>\r\n      //     <a\r\n      //     className=\"App-link\"\r\n      //     href=\"https://reactjs.org\"\r\n      //     target=\"_blank\"\r\n      //     rel=\"noopener noreferrer\"\r\n      //     >\r\n      //     Learn React\r\n      //   </a>\r\n      // </header> \r\n     )\r\n }\r\n\r\n export default ToDoApp;\r\n ","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport ToDoApp from './todo_app/ToDoApp';\r\n\r\nfunction BaseRouter() {\r\n    return (\r\n        <div>\r\n            <Route exact path='/'><Redirect to=\"/index\" /></Route>\r\n            <Route exact path='/index' render={(props) => <ToDoApp  {...props}/>} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BaseRouter;","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport BaseRouter from './routes';\n\nfunction App() {\n  return (\n    <Router>\n      <BaseRouter />\n    </Router>\n  );\n}\n\nexport default App;\n","export const AUTH_START = 'AUTH_START';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_FAIL = 'AUTH_FAIL';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject, // ... creates a clone of the oldObject\r\n        ...updatedProperties // replace oldObject with the updatedProperties\r\n    }\r\n}","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility';\r\n\r\n// we need to define our initial state, of the entire application,\r\n// like loading, authentication, token, etc.\r\n\r\nconst initialState = {\r\n    token: null,\r\n    error: null,\r\n    loading: false,\r\n}\r\n\r\n// authStart takes the action so that error is null and loading is true\r\n// The spinner will start spinning once authStart is dispatched.\r\n// When authSuccess is dispatched, we say the loading is false and\r\n// and spinner will disappear.\r\nconst authStart = (state, action) => {\r\n    return updateObject(state, {\r\n        error: null,\r\n        loading: true\r\n    });\r\n}\r\n\r\nconst authSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        token: action.token,\r\n        error: null,\r\n        loading: false\r\n    });\r\n}\r\n\r\nconst authFail = (state, action) => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    });\r\n}\r\n\r\nconst authLogout = (state, action) => {\r\n    return updateObject(state, {\r\n        token: null,\r\n        loading: false,\r\n    })\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.AUTH_START: return authStart(state, action);\r\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\r\n        case actionTypes.AUTH_FAIL: return authFail(state, action);\r\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './store/reducers/auth';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhances(\n  applyMiddleware(thunk)\n));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();"],"sourceRoot":""}